# Usando o Resource Bundle do Spring como Resource Bundle do Bean Validation

#INFORMANDO O CAMINHO COMPLETO DA CONSTRAINT
#Abaixo um exemplo de retornar a mensagem informando o tipo da constraint e onde ela se encontra
# NotEmpty.pessoa.nome=Nome da Pessoa não pode estar em branco.
# NotNull.pessoa.nome=Nome da Pessoa não pode ser Null.
# NotNull.pessoa.sobrenome=Sobrenome da Pessoa não pode ser Null.


# USANDO PLACE HOLDERS
#Usando a técnica abaixo é possível deixar a mensagem mais genérica ou seja o NotNull abaixo vai tratar qualquer 
#constraint NotNull do projeto. mas usando Place Holders podemos substituir o(s) valor(es) informados pelos nomes dos capos
#conforme abaixo 
#As informações abaixo servem formatar os nomes dos campos, assim o campo que seria nome será exibido como Nome, lembrando
#que isso serva para a anotação e não a classe, ou seja varias classes podem usarm essa técnica.
NotNull={0} não pode ser Nullo.
Nome=nome
sobrenome=Sobrenome
Especie=especie
especie=Especie

NotEmpty={0} não pode estar em branco.
nome=Nome
sobrenome=Sobrenome

#A constraint abaixo foi criado por mim, e seu tratamento no message.properties é o mesmo. Nesse caso estamos usando o place holder
#{1} que é o valor informado na constraint
Multiplo={0} deve ser um valor multiplo de {1}
qtdePatas=Quantidade de Patas


#Usando o Resource Bundle do Bean Validation

# é possível também unir os dois Resource Baundles, tanto o do Spring quanto o do Beean Validation
#usando a classe ValidationConfig do pacote core.validation ficaria da seguinte maneira
#caso nada seja definida na constraints , ou seja nada informado na propriedade message
#a classe entra em ação e o bean validation pega a mensagem abaixo.
javax.validation.constraints.Min.message = O valor informado deve ser no minino 2.

#abaixo uma forma de personalizar a mensagem pelo bean validation onde é possivel criar um identificador
#para buscar a mensagem. Nesse caso foi usado o identificador Valor.invalido
Valor.invalido=O valor deve ser maior ou igual a 0.
